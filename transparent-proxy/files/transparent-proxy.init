#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

NAME=transparent-proxy
#MARK=1088

nft=""
[[  "$(which ip6tables-nfts)" ]] && nft=-nft

validate_section_tproxy() {
	uci_load_validate "${NAME}" general "$1" "$2" \
		'enable:bool:0' \
		'udp:bool:0' \
		'redirect_port:string' \
		'self_proxy:bool:0' \
		'ipv6_proxy:bool:0' \
		'so_mark:string' \
		'tproxy_port_process_runat_user:string' \
		'skip_lan_ip:string' \
		'skip_lan_mac:string' \
		'ipsetname:string' \
		'ipset6name:string' \
		'ipsetfile:string'
}

uci_get_by_type() {
	local ret=$(uci get ${NAME}.@$1[0].$2 2>/dev/null)
	echo "${ret:=$3}"
}

tproxy_instance() {
	[ "$2" = 0 ] || {
		echo "validation failed"
		return 1
	}

	[ "${enable}" == 0 ] && return 1

	start_x
}

start_service() {
	config_load "${NAME}"
	config_foreach validate_section_tproxy general tproxy_instance
}

stop_service() {
	stop_x
}

reload_service() {
	stop_x
	sleep 1
	start_x
}

boot() {
	local delay=$(uci_get_by_type general startup_delay 0)
	(sleep $delay && start_x >/dev/null 2>&1) &
	return 0
}

start_iptables() {
	iptables$nft -t mangle -N HYSTERIA

	iptables$nft -t mangle -A HYSTERIA -d 0.0.0.0/8 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 10.0.0.0/8 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 100.64.0.0/10 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 127.0.0.0/8 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 169.254.0.0/16 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 172.16.0.0/12 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 192.168.0.0/16 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 224.0.0.0/4 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 240.0.0.0/4 -j RETURN
	iptables$nft -t mangle -A HYSTERIA -d 255.255.255.255/32 -j RETURN
	# 如果全局用iptables劫持dns的话，启用以下两行
	#iptables$nft -t mangle -I HYSTERIA -p tcp --dport 53 -j RETURN
	#iptables$nft -t mangle -I HYSTERIA -p udp --dport 53 -j RETURN
	for lanip in ${skip_lan_ip} ; do
		if [ ! -z ${lanip} ];then
			iptables$nft -t mangle -A HYSTERIA -s ${lanip} -j RETURN
		fi
	done
	for lanmac in ${skip_lan_mac} ; do
		if [ ! -z ${lanmac} ];then
			iptables$nft -t mangle -A HYSTERIA -m mac --mac-source ${lanmac} -j RETURN
		fi
	done
	iptables$nft -t mangle -A HYSTERIA -p tcp -m set --match-set china.ipset dst -j RETURN
	[ "${udp}" == 1 ] && iptables$nft -t mangle -A HYSTERIA -p udp -m set --match-set china.ipset dst -j RETURN
	iptables$nft -t mangle -A HYSTERIA -p tcp -m set --match-set vps.ipset dst -j RETURN
	[ "${udp}" == 1 ] && iptables$nft -t mangle -A HYSTERIA -p udp -m set --match-set vps.ipset dst -j RETURN
	iptables$nft -t mangle -A HYSTERIA -j RETURN -m mark --mark ${so_mark}
	# 重定向流量到 TProxy 端口
	[ "${udp}" == 1 ] && iptables$nft -t mangle -A HYSTERIA -p udp -j TPROXY --on-ip 127.0.0.1 --on-port ${redirect_port} --tproxy-mark 1
	iptables$nft -t mangle -A HYSTERIA -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port ${redirect_port} --tproxy-mark 1
	# 启用上述规则
	iptables$nft -t mangle -A PREROUTING -j HYSTERIA

	# 新建 HYSTERIA_DIVERT 规则，避免已有连接的包二次通过 TPROXY，理论上有一定的性能提升 v4
	iptables$nft -t mangle -N HYSTERIA_DIVERT
	iptables$nft -t mangle -A HYSTERIA_DIVERT -j MARK --set-mark 1
	iptables$nft -t mangle -A HYSTERIA_DIVERT -j ACCEPT
	iptables$nft -t mangle -I PREROUTING -p tcp -m socket -j HYSTERIA_DIVERT

	# 强制走代理，用mangle链的TPROXY会上不了国内网，所以只能用REDIRECT方式
	for ips in ${ipsetname} ; do
		if [ ! -z ${ips} ];then
			iptables$nft -t nat -I PREROUTING -p tcp -m set --match-set ${ips} dst -m comment --comment "USE_PROXY" -j REDIRECT --to-port ${redirect_port} -m mark --mark 0xff
			[ "${udp}" == 1 ] && iptables$nft -t nat -I PREROUTING -p udp -m set --match-set ${ips} dst -m comment --comment "USE_PROXY" -j REDIRECT --to-port ${redirect_port} -m mark --mark 0xff
		fi
	done

	if [ "${ipv6_proxy}" == 1 ];then
		ip6tables$nft -t mangle -N HYSTERIA6

		# 仅对公网 IPv6 启用代理
		ip6tables$nft -t mangle -A HYSTERIA6 ! -d 2000::/3 -j RETURN	
		# 如果全局用ip6tables劫持dns的话，启用以下两行
		#ip6tables$nft -t mangle -I HYSTERIA6 -p tcp --dport 53 -j RETURN
		#ip6tables$nft -t mangle -I HYSTERIA6 -p udp --dport 53 -j RETURN
		for lanmac in ${skip_lan_mac} ; do
			if [ ! -z ${lanmac} ];then
				ip6tables$nft -t mangle -A HYSTERIA6 -m mac --mac-source ${lanmac} -j RETURN
			fi
		done
		ip6tables$nft -t mangle -A HYSTERIA6 -p tcp -m set --match-set china6.ipset dst -j RETURN
		[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6 -p udp -m set --match-set china6.ipset dst -j RETURN
		ip6tables$nft -t mangle -A HYSTERIA6 -p tcp -m set --match-set vps6.ipset dst -j RETURN
		[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6 -p udp -m set --match-set vps6.ipset dst -j RETURN
		ip6tables$nft -t mangle -A HYSTERIA6 -j RETURN -m mark --mark ${so_mark}
		# 重定向流量到 TProxy 端口
		[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6 -p udp -j TPROXY --on-ip ::1 --on-port ${redirect_port} --tproxy-mark 1
		ip6tables$nft -t mangle -A HYSTERIA6 -p tcp -j TPROXY --on-ip ::1 --on-port ${redirect_port} --tproxy-mark 1
		# 启用上述规则
		ip6tables$nft -t mangle -A PREROUTING -j HYSTERIA6
	
		# 新建 HYSTERIA_DIVERT 规则，避免已有连接的包二次通过 TPROXY，理论上有一定的性能提升 v4
		ip6tables$nft -t mangle -N HYSTERIA_DIVERT
		ip6tables$nft -t mangle -A HYSTERIA_DIVERT -j MARK --set-mark 1
		ip6tables$nft -t mangle -A HYSTERIA_DIVERT -j ACCEPT
		ip6tables$nft -t mangle -I PREROUTING -p tcp -m socket -j HYSTERIA_DIVERT

		# 强制走代理  TPROXY 可以透明代理 IPV6，而 REDIRECT 不行
		ip6tables$nft -t mangle -N HYSTERIA6_PXY
		for ips in ${ipset6name} ; do
			if [ ! -z ${ips} ];then
				ip6tables$nft -t mangle -A HYSTERIA6_PXY -p tcp -m set --match-set ${ips} dst -j TPROXY --on-port ${redirect_port} --on-ip ::1 --tproxy-mark 0x1
				[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6_PXY -p udp -m set --match-set ${ips} dst -j TPROXY --on-port ${redirect_port} --on-ip ::1 --tproxy-mark 0x1
			fi
		done
		ip6tables$nft -t mangle -A PREROUTING -j HYSTERIA6_PXY
	fi

	# === 代理本机流量 - 开始 ===
	if [ "${self_proxy}" == 1 ];then
		iptables$nft -t mangle -N HYSTERIA_MARK

		# 通过匹配用户来避免环路，-m owner或-m mark任意一个生效都可以
		[ ! -z "${tproxy_port_process_runat_user}" ] && iptables$nft -t mangle -A HYSTERIA_MARK -m owner --uid-owner ${tproxy_port_process_runat_user} -j RETURN
		[ ! -z "${so_mark}" ] && iptables$nft -t mangle -A HYSTERIA_MARK -j RETURN -m mark --mark ${so_mark}
		if [ -z "${tproxy_port_process_runat_user}" ] && [ -z "${so_mark}" ];then
			echo '您没有配置tproxy_port_process_runat_user或so_mark，为避免产生回环，已自动改成不代理本机流量'
			return 1
		fi

		# 绕过局域网和特殊 IPv4 地址
		iptables$nft -t mangle -A HYSTERIA_MARK -d 0.0.0.0/8 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 10.0.0.0/8 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 100.64.0.0/10 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 127.0.0.0/8 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 169.254.0.0/16 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 172.16.0.0/12 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 192.168.0.0/16 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 224.0.0.0/4 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 240.0.0.0/4 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -d 255.255.255.255/32 -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -p tcp -m set --match-set china.ipset dst -j RETURN
		[ "${udp}" == 1 ] && iptables$nft -t mangle -A HYSTERIA_MARK -p udp -m set --match-set china.ipset dst -j RETURN
		iptables$nft -t mangle -A HYSTERIA_MARK -p tcp -m set --match-set vps.ipset dst -j RETURN
		[ "${udp}" == 1 ] && iptables$nft -t mangle -A HYSTERIA_MARK -p udp -m set --match-set vps.ipset dst -j RETURN

		# 重路由 OUTPUT 链流量到 PREROUTING 链
		iptables$nft -t mangle -A HYSTERIA_MARK -p tcp -j MARK --set-mark 1
		[ "${udp}" == 1 ] && iptables$nft -t mangle -A HYSTERIA_MARK -p udp -j MARK --set-mark 1

		# 启用上述规则
		iptables$nft -t mangle -A OUTPUT -j HYSTERIA_MARK

		# === 代理本机流量 - 结束 ===
		if [ "${ipv6_proxy}" == 1 ];then
			# === 代理本机流量 - 开始 ===

			ip6tables$nft -t mangle -N HYSTERIA6_MARK

			# 通过匹配用户来避免环路
			[ ! -z "${tproxy_port_process_runat_user}" ] && ip6tables$nft -t mangle -A HYSTERIA6_MARK -m owner --uid-owner ${tproxy_port_process_runat_user} -j RETURN
			[ ! -z "${so_mark}" ] && ip6tables$nft -t mangle -A HYSTERIA6_MARK -j RETURN -m mark --mark ${so_mark}
			if [ -z "${tproxy_port_process_runat_user}" ] && [ -z "${so_mark}" ];then
				echo '您没有配置tproxy_port_process_runat_user或so_mark，为避免产生回环，已自动改成不代理本机流量'
				return 1
			fi

			# 仅对公网 IPv6 启用代理
			ip6tables$nft -t mangle -A HYSTERIA6_MARK ! -d 2000::/3 -j RETURN

			ip6tables$nft -t mangle -A HYSTERIA6_MARK -p tcp -m set --match-set china6.ipset dst -j RETURN
			[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6_MARK -p udp -m set --match-set china6.ipset dst -j RETURN
			ip6tables$nft -t mangle -A HYSTERIA6_MARK -p tcp -m set --match-set vps6.ipset dst -j RETURN
			[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6_MARK -p udp -m set --match-set vps6.ipset dst -j RETURN

			# 重路由 OUTPUT 链流量到 PREROUTING 链
			ip6tables$nft -t mangle -A HYSTERIA6_MARK -p tcp -j MARK --set-mark ${so_mark}
			[ "${udp}" == 1 ] && ip6tables$nft -t mangle -A HYSTERIA6_MARK -p udp -j MARK --set-mark ${so_mark}

			# 启用上述规则
			ip6tables$nft -t mangle -A OUTPUT -j HYSTERIA6_MARK

			# === 代理本机流量 - 结束 ===
		fi
	fi
}

stop_iptables() {
	iptables$nft-save | grep ' HYSTERIA' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do iptables$nft -t mangle -D $LINE; done
	ip6tables$nft-save | grep ' HYSTERIA' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do ip6tables$nft -t mangle -D $LINE; done
	
	iptables$nft-save|grep ':HYSTERIA' |awk '{print $1}'|awk -F: '{print $2}'|while read LINE; do iptables$nft -t mangle -F $LINE;iptables$nft -t mangle -X $LINE; done
	ip6tables$nft-save|grep ':HYSTERIA' |awk '{print $1}'|awk -F: '{print $2}'|while read LINE; do ip6tables$nft -t mangle -F $LINE;ip6tables$nft -t mangle -X $LINE; done
	
	iptables$nft-save | grep 'USE_PROXY' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do iptables$nft -t nat -D $LINE; done
	ip6tables$nft-save | grep 'USE_PROXY' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do ip6tables$nft -t nat -D $LINE; done
	
	## iptables$nft -t mangle -D PREROUTING -j HYSTERIA
	#iptables$nft -t mangle -F HYSTERIA
	#iptables$nft -t mangle -X HYSTERIA
	#iptables$nft -t mangle -F HYSTERIA_PROXY
	#iptables$nft -t mangle -X HYSTERIA_PROXY
	#
	## iptables$nft -t mangle -D OUTPUT -j HYSTERIA_MARK  >/dev/null 2>&1
	#iptables$nft -t mangle -F HYSTERIA_MARK  >/dev/null 2>&1
	#iptables$nft -t mangle -X HYSTERIA_MARK  >/dev/null 2>&1
	#
	#ip6tables$nft -t mangle -F HYSTERIA6
	#ip6tables$nft -t mangle -X HYSTERIA6
	##ip6tables$nft -t mangle -F HYSTERIA_PROXY
	##ip6tables$nft -t mangle -X HYSTERIA_PROXY
	#ip6tables$nft -t mangle -F HYSTERIA6_MARK  >/dev/null 2>&1
	#ip6tables$nft -t mangle -X HYSTERIA6_MARK  >/dev/null 2>&1
	#
	#iptables-save | grep ' -j DIVERT' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do iptables$nft -t mangle -D $LINE; done
	#ip6tables-save | grep ' -j DIVERT' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do ip6tables$nft -t mangle -D $LINE; done
	#iptables$nft -t mangle -F DIVERT
	#iptables$nft -t mangle -X DIVERT
	#ip6tables$nft -t mangle -F DIVERT
	#ip6tables$nft -t mangle -X DIVERT
}

start_ipset() {
	ipset restore -f /etc/ipset/china.ipset
	ipset restore -f /etc/ipset/vps.ipset
	if [ "${ipv6_proxy}" == 1 ];then
		ipset restore -f /etc/ipset/china6.ipset
		ipset restore -f /etc/ipset/vps6.ipset
	fi
	for ips in ${ipsetfile} ; do
		if [ ! -z ${ips} ];then
			setname=$(head -n 1 ${ips}|awk '{print $2}')
			ipset destroy $setname
			ipset restore -f ${ips}
		fi
	done
}

start_iproute2() {
	# Strategy Route
	ip -4 rule add fwmark 1 table 100
	ip -4 route add local default dev lo table 100
	[ "${ipv6_proxy}" == 1 ] && ip -6 rule add fwmark 1 table 100
	[ "${ipv6_proxy}" == 1 ] && ip -6 route add local default dev lo table 100 metric 100
}

stop_iproute2() {
	ip -4 rule  del   table 100 >/dev/null 2>&1
	ip -4 route flush table 100 >/dev/null 2>&1
	ip -6 rule  del   table 100 >/dev/null 2>&1
	ip -6 route flush table 100 >/dev/null 2>&1
	ip -6 route delete local default dev lo table 100 >/dev/null 2>&1
}

stop_ipset() {
	#iptables-save | grep '.ipset ' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do iptables$nft -t mangle -D $LINE; done
	#ip6tables-save | grep '.ipset ' |awk '{for(i=2;i<=NF;i=i+1)printf " "$i;print ""}' |while read LINE; do ip6tables$nft -t mangle -D $LINE; done
	ipset destroy china.ipset >/dev/null 2>&1
	ipset destroy vps.ipset >/dev/null 2>&1
	ipset destroy china6.ipset >/dev/null 2>&1
	ipset destroy vps6.ipset >/dev/null 2>&1
}

validate_section_fw() {
	uci_load_validate "firewall" rule "$1" "$2" \
		'src:string' \
		'dest:string' \
		'target:string' \
		'src_mac:string' \
		'src_ip:string' \
		'enabled:string'
}

fw_rule() {
	[ "$2" = 0 ] || {
		echo "validation failed"
		return 1
	}

	[ "${enabled}" = "0" ] && return 1

	if [[ "${src}" == "lan" ]] && [[ "${dest}" == "wan" ]] && [[ "${target}" == "REJECT" ]];then
		for lanmac in ${src_mac} ; do
			if [ ! -z ${lanmac} ];then
				iptables$nft -t mangle -I HYSTERIA -m mac --mac-source ${lanmac} -j RETURN
		        if [ "${ipv6_proxy}" == 1 ];then
		            ip6tables$nft -t mangle -I HYSTERIA6 -m mac --mac-source ${lanmac} -j RETURN
		        fi
			fi
		done
		for lanip in ${src_ip} ; do
			if [ ! -z ${lanip} ];then
				iptables$nft -t mangle -I HYSTERIA -s ${lanip} -j RETURN
		        if [ "${ipv6_proxy}" == 1 ] && [[ ${lanip} =~ ":" ]];then
		            ip6tables$nft -t mangle -I HYSTERIA6 -s ${lanip} -j RETURN
		        fi
			fi
		done
	fi
}

start_fw_reject() {
	config_load "firewall"
	config_foreach validate_section_fw rule fw_rule
}

start_x() {
	echo "start ..."
	if [ "${so_mark}" == 1 ];then
		echo 'so_mark不能配置为1'
		return 1
	fi
	start_ipset
	start_iptables
	start_fw_reject
	start_iproute2
	echo "start end"
	if [ "${self_proxy}" == 1 ];then
		echo '您启用了代理本机流量，请注意不要产生回环，否则很大可能会连接数飚到成千上万进而死机，tproxy_port_process_runat_user和so_mark这两个配置就是避免此种情况，二者任意一个必须正确'
	fi
	echo china ipset count $(ipset list china.ipset |grep Number)
	echo vps ipset count $(ipset list vps.ipset |grep Number)
	if [ "${ipv6_proxy}" == 1 ];then
		echo china6 ipset count $(ipset list china6.ipset |grep Number)
		echo vps6 ipset count $(ipset list vps6.ipset |grep Number)
	fi
}

stop_x() {
	echo "stop ..."
	stop_iproute2
	stop_iptables
	stop_ipset
	echo "stop end"
}
